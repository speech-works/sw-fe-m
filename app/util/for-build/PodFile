require File.join(File.dirname(`node --print "require.resolve('expo/package.json')"`), "scripts/autolinking")
require File.join(File.dirname(`node --print "require.resolve('react-native/package.json')"`), "scripts/react_native_pods")

require 'json'
podfile_properties = JSON.parse(File.read(File.join(__dir__, 'Podfile.properties.json'))) rescue {}

# Environment configuration
ENV['RCT_NEW_ARCH_ENABLED'] = podfile_properties['newArchEnabled'] == 'true' ? '1' : '0'
ENV['EX_DEV_CLIENT_NETWORK_INSPECTOR'] = podfile_properties['EX_DEV_CLIENT_NETWORK_INSPECTOR'] || '0'
ENV['SWIFT_VERSION'] = '5.0' # Set global Swift version

# Core dependencies
pod 'DoubleConversion', :podspec => '../node_modules/react-native/third-party-podspecs/DoubleConversion.podspec'
pod 'fmt', :podspec => '../node_modules/react-native/third-party-podspecs/fmt.podspec'
pod 'boost', :podspec => '../node_modules/react-native/third-party-podspecs/boost.podspec'
pod 'glog', :podspec => '../node_modules/react-native/third-party-podspecs/glog.podspec'
pod 'RCT-Folly', :podspec => '../node_modules/react-native/third-party-podspecs/RCT-Folly.podspec', :modular_headers => true

platform :ios, podfile_properties['ios.deploymentTarget'] || '15.4'
install! 'cocoapods',
  :deterministic_uuids => false,
  :generate_multiple_pod_projects => true,
  :incremental_installation => true

prepare_react_native_project!

target 'swfem' do
  # Expo dependencies
  pod 'Expo', :path => '../node_modules/expo', :modular_headers => true
  pod 'ExpoModulesCore', :path => '../node_modules/expo-modules-core'
  
  use_expo_modules!

  config_command = ENV['EXPO_USE_COMMUNITY_AUTOLINKING'] == '1' ? 
    ['node', '-e', "process.argv=['', '', 'config'];require('@react-native-community/cli').run()"] :
    ['npx', 'expo-modules-autolinking', 'react-native-config', '--json', '--platform', 'ios']

  config = use_native_modules!(config_command)

  # Dynamic frameworks can cause issues with React Native
  use_frameworks! :linkage => podfile_properties['ios.useFrameworks'] == 'true' ? :dynamic : :static

  use_react_native!(
    :path => config[:reactNativePath],
    :hermes_enabled => podfile_properties['expo.jsEngine'] == 'hermes',
    :app_path => "#{Pod::Config.instance.installation_root}/..",
    :privacy_file_aggregation_enabled => podfile_properties['apple.privacyManifestAggregationEnabled'] == 'true',
    :fabric_enabled => podfile_properties['newArchEnabled'] == 'true'
  )

  post_install do |installer|
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false,
      :ccache_enabled => podfile_properties['apple.ccacheEnabled'] == 'true'
    )

    # Set Swift version and C++ standards for all targets
    installer.pods_project.targets.each do |target|
      target.build_configurations.each do |config|
        # Standard settings for all targets
        config.build_settings['SWIFT_VERSION'] = '5.0'
        config.build_settings['CLANG_ENABLE_MODULES'] = 'YES'
        
        # C++ Standard Library settings
        config.build_settings['CLANG_CXX_LANGUAGE_STANDARD'] = 'c++20'
        config.build_settings['CLANG_CXX_LIBRARY'] = 'libc++'
        config.build_settings['GCC_C_LANGUAGE_STANDARD'] = 'gnu11'
        
        # Only set DEFINES_MODULE for Swift pods
        if target.name.include?('Expo') || target.name.include?('Swift')
          config.build_settings['DEFINES_MODULE'] = 'YES'
        end

        # Architecture settings
        config.build_settings['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = 'arm64' # For M1 compatibility
        config.build_settings['ONLY_ACTIVE_ARCH'] = 'NO'

        # For React Native performance logging fix
        if target.name.include?('React-perflogger')
          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']
          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'FOLLY_HAVE_STD__HASH=0'
        end

        # For Expo modules specifically
        if target.name.start_with?('Expo')
          config.build_settings['ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES'] = 'NO'
          config.build_settings['GCC_WARN_INHIBIT_ALL_WARNINGS'] = 'YES'
        end
      end
    end

    # Create .swift-version file if needed
    swift_version_path = File.join(__dir__, '.swift-version')
    File.write(swift_version_path, '5.0') unless File.exist?(swift_version_path)
  end
end